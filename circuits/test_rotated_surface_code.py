from circuits.rotated_surface_code import RotatedSurfaceCode
from circuits.circuit_builder import CircuitBuilder
import stim


class RotatedSurfaceCodeMock(RotatedSurfaceCode):
    def __init__(self, distance, p_idling=0, p_1=0, p_2=0, p_m=0, p_prep=0):
        self.builder = CircuitBuilder(p_idling, p_1, p_2, p_m, p_prep)
        self.distance = distance
        self.circ = self.builder.circ


def test_create_t0():
    d3rsc = RotatedSurfaceCodeMock(3)
    data_qubits, X_face_ancilla, Z_face_ancilla, X_left_boundary_ancilla, X_right_boundary_ancilla, Z_top_boundary_ancilla, Z_bottom_boundary_ancilla = d3rsc.create_t0()

    assert data_qubits == {(0, 2): 0, (1, 1): 1, (2, 0): 2, (1, 3): 3, (2, 2)
                            : 4, (3, 1): 5, (2, 4): 6, (3, 3): 7, (4, 2): 8}
    assert X_face_ancilla == {(2, 1): 9, (2, 3): 10}
    assert Z_face_ancilla == {(1, 2): 11, (3, 2): 12}
    assert X_left_boundary_ancilla == {(0, 1): 13}
    assert X_right_boundary_ancilla == {(4, 3): 14}
    assert Z_top_boundary_ancilla == {(1, 4): 15}
    assert Z_bottom_boundary_ancilla == {(3, 0): 16}

    assert d3rsc.circ.num_qubits == 9 + 4 + 4

    d5rsc = RotatedSurfaceCodeMock(5)
    d5rsc.create_t0()
    data_qubits, X_face_ancilla, Z_face_ancilla, X_left_boundary_ancilla, X_right_boundary_ancilla, Z_top_boundary_ancilla, Z_bottom_boundary_ancilla = d5rsc.create_t0()

    assert d5rsc.circ.num_qubits == 25 + 24


def test_build_d5_circ():
    d5rsc = RotatedSurfaceCode(5, 0.1, 0.12, 0.13, 0.14, 0.15)
    print(d5rsc.builder.circ)
    print(d5rsc.builder.circ.detector_error_model(approximate_disjoint_errors=True))


def test_build_d3_circ():
    d3rsc = RotatedSurfaceCode(3, 0.1, 0.12, 0.13, 0.14, 0.15)
    print(d3rsc.builder.circ.detector_error_model(approximate_disjoint_errors=True))
    assert str(d3rsc.builder.circ) == """QUBIT_COORDS(0, 2) 0
QUBIT_COORDS(1, 1) 1
QUBIT_COORDS(2, 0) 2
QUBIT_COORDS(1, 3) 3
QUBIT_COORDS(2, 2) 4
QUBIT_COORDS(3, 1) 5
QUBIT_COORDS(2, 4) 6
QUBIT_COORDS(3, 3) 7
QUBIT_COORDS(4, 2) 8
R 0 1 2 3 4 5 6 7 8
QUBIT_COORDS(2, 1) 9
QUBIT_COORDS(2, 3) 10
R 9 10
QUBIT_COORDS(1, 2) 11
QUBIT_COORDS(3, 2) 12
R 11 12
QUBIT_COORDS(0, 1) 13
QUBIT_COORDS(4, 3) 14
R 13 14
QUBIT_COORDS(3, 0) 15
QUBIT_COORDS(1, 4) 16
R 16 15
PAULI_CHANNEL_1(0.05, 0.05, 0.05) 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 15
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
CX 9 5 10 7 13 1 6 16 4 11 8 12
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 5 10 7 13 1 6 16 4 11 8 12
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 2 3 14 15
CX 9 4 10 6 1 11 5 12 13 0 3 16
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 4 10 6 1 11 5 12 13 0 3 16
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 2 7 8 14 15
CX 9 2 10 4 3 11 7 12 5 15 14 8
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 2 10 4 3 11 7 12 5 15 14 8
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 6 13 16
CX 9 1 10 3 0 11 4 12 2 15 14 7
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 1 10 3 0 11 4 12 2 15 14 7
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 5 6 8 13 16
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
X_ERROR(0.14) 9 10 13 14
M 9 10 13 14
X_ERROR(0.14) 11 12 16 15
M 11 12 16 15
DETECTOR(1, 2, 0) rec[-4]
DETECTOR(3, 2, 0) rec[-3]
DETECTOR(1, 4, 0) rec[-2]
DETECTOR(3, 0, 0) rec[-1]
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
R 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.05, 0.05, 0.05) 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
R 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.05, 0.05, 0.05) 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
CX 9 5 10 7 13 1 6 16 4 11 8 12
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 5 10 7 13 1 6 16 4 11 8 12
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 2 3 14 15
CX 9 4 10 6 1 11 5 12 13 0 3 16
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 4 10 6 1 11 5 12 13 0 3 16
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 2 7 8 14 15
CX 9 2 10 4 3 11 7 12 5 15 14 8
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 2 10 4 3 11 7 12 5 15 14 8
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 6 13 16
CX 9 1 10 3 0 11 4 12 2 15 14 7
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 1 10 3 0 11 4 12 2 15 14 7
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 5 6 8 13 16
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
X_ERROR(0.14) 16 9 10 11 12 13 14 15
M 16 9 10 11 12 13 14 15
DETECTOR(1, 4, 0) rec[-8] rec[-10]
DETECTOR(2, 1, 0) rec[-7] rec[-16]
DETECTOR(2, 3, 0) rec[-6] rec[-15]
DETECTOR(1, 2, 0) rec[-5] rec[-12]
DETECTOR(3, 2, 0) rec[-4] rec[-11]
DETECTOR(0, 1, 0) rec[-3] rec[-14]
DETECTOR(4, 3, 0) rec[-2] rec[-13]
DETECTOR(3, 0, 0) rec[-1] rec[-9]
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
R 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.05, 0.05, 0.05) 16 9 10 11 12 13 14 15
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8
TICK
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
CX 9 5 10 7 13 1 6 16 4 11 8 12
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 5 10 7 13 1 6 16 4 11 8 12
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 2 3 14 15
CX 9 4 10 6 1 11 5 12 13 0 3 16
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 4 10 6 1 11 5 12 13 0 3 16
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 2 7 8 14 15
CX 9 2 10 4 3 11 7 12 5 15 14 8
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 2 10 4 3 11 7 12 5 15 14 8
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 6 13 16
CX 9 1 10 3 0 11 4 12 2 15 14 7
TICK
PAULI_CHANNEL_2(0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667, 0.00866667) 9 1 10 3 0 11 4 12 2 15 14 7
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 5 6 8 13 16
H 9 10 13 14
TICK
PAULI_CHANNEL_1(0.04, 0.04, 0.04) 9 10 13 14
PAULI_CHANNEL_1(0.0333333, 0.0333333, 0.0333333) 0 1 2 3 4 5 6 7 8 11 12 15 16
X_ERROR(0.14) 16 9 10 11 12 13 14 15
M 16 9 10 11 12 13 14 15
DETECTOR(1, 4, 1) rec[-8] rec[-16]
DETECTOR(2, 1, 1) rec[-7] rec[-15]
DETECTOR(2, 3, 1) rec[-6] rec[-14]
DETECTOR(1, 2, 1) rec[-5] rec[-13]
DETECTOR(3, 2, 1) rec[-4] rec[-12]
DETECTOR(0, 1, 1) rec[-3] rec[-11]
DETECTOR(4, 3, 1) rec[-2] rec[-10]
DETECTOR(3, 0, 1) rec[-1] rec[-9]
X_ERROR(0.14) 0 1 2 3 4 5 6 7 8
M 0 1 2 3 4 5 6 7 8
DETECTOR(1, 2, 1) rec[-14] rec[-9] rec[-6] rec[-8] rec[-5]
DETECTOR(3, 2, 1) rec[-13] rec[-5] rec[-2] rec[-4] rec[-1]
DETECTOR(3, 0, 1) rec[-10] rec[-7] rec[-4]
DETECTOR(1, 4, 1) rec[-17] rec[-6] rec[-3]
OBSERVABLE_INCLUDE(0) rec[-9] rec[-8] rec[-7]"""


test_build_d5_circ()
# def test_create_first_half():
#    circuit = RotatedSurfaceCode(3, 3, 0.1, 0.1, 0.1, 0.1, 0.1).circ
#    print(circuit)
